/**** Design Document for Sales Tax ****/

/** Problem Discription **/
Given a series of n items 1, ... , n return the total cost, or 
in other words, a receipt for all n items. 

- More to know: 
For all n, n is associated with the name of the product, and a cost.
Given that a reciept is requested, tax must be included. Basic Tax applies to
all items execpt books, food, and medical products. 

/** File Structure **/ 
- DesignDocument.txt -> information about the project/problem
- src 
    - inputFiles
        - input1.txt -- input one from email
        - input2.txt -- input two from email
        - input3.txt -- input three from email
    - Receipt.java <- contains a collection of exempt and non exempt items 
    - Parse.java <- Determaines what type of Imported Item based on input 
    - Item.java <- abstract class 
        - ExemptItem.java <- items such as books, food, and medical products
        - TaxedItem.java  <- everything else not in ExemptItem.java, C
                          <- can be imported and thus apply 5% more tax 
- db  
    - nonExempt.txt <- column of names of non exempt items, food, medical, books 


/** Data Structures **/
The data structure that will be best to use is a HashMap.
Within the HashMap, it is essential that we have the name
of the the item and price. The HashMap will primarily be used in the 
Receipt.java files. In Receipt.java, we want to 
maintain an ArrayList of TaxDifferences, and a HashMap to maintain the
original name, and after taxes price of the item. 

Originally, the name of the string passed into the hashmap is not filtered
or tailored the to output, so it is essential that after the information is added
in their proper objects, there must be some preprocessing before the output is printed.


/** OOP **/
This problem could be done without OOP, but the code would be a mess.
Given that code should be clean, and concise, OOP is the best approach for 
this scenerio. Using an abstract classes, implemting an abstract tax method will
be key for distinguising the types of Items: Exempt and Taxed. Given that the information passed into a class is:
quantity, name of item, cost, constructors would be neccesary. Interfaces do not allow constructors,
thus polymorphism and abstract classes will be used. 


/** Input **/
Types of Input -- Based on the email sent 

Name of Column : Type 
quantity : INT 
itemName : STRING 
cost : DOUBLE

Input will use a text file that is comma delimited in the following way:


/* Format */
quantity, itemName, cost 

ex. 

1, box of chocalate ,2.99
2, imported fish, 3.67
... , ... , ...
... , ... , ...
... , ... , ...
1 , poke, 14.29


/* Note */
Some outputs are off by a couple cents and I realized the potential 
underlying issue after outputing the information. The main issue is the 
multiplying the quantity, an Integer, by the cost, a Double, causes small 
rounding to happen. Other than that, the Receipt works perfectly. I really 
tried my best the make the code as clean and elegant as possible. I am always
open to feedback. I received the challenge on Thursday afternoon, and Finished Saturday
afternoon.

Also I was planning to do the first problem, but I knew I would have enjoyed the second 
one. For the first one, setting up a Graph Data Structure as ArrayList representation and then 
running Dijkstra's Algorithm on a given source would have been the approach. Of course,
assuming all nodes are positive, since Dijkstra's does not allow negative weights or neg. cycles,
and in that case we'd approach the problem using the BellManFord Algorithm.  

/* How to Run */
Parse.java - Change the line that reads the location of the mini-database of words
Main.java  1/ Compile all files -> javac *.java 
           2/ Run -> java Main [path to input files]


/* Other */ 
I removed all the .class files before submitting 
Feel free to check my repo: https://github.com/Yepez1997/receipt
If anything crashes at the beggining, my last commit was my final. Everything
works fine with my final commit. 
